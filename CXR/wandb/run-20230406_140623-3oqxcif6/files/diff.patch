diff --git a/CXR/inference.py b/CXR/inference.py
index b4dd368..a75869f 100644
--- a/CXR/inference.py
+++ b/CXR/inference.py
@@ -20,9 +20,10 @@ def parse_args():
     parser = argparse.ArgumentParser(description='PyTorch training script')
     parser.add_argument('--base_root', type=str, default='/home/dongdong/Medical-Image-Analysis/CXR/xray_jpg/', help='path to the base data directory')
     parser.add_argument('--csv_name', type=str, default='chest_dongdong.csv', help='name of the CSV file containing the dataset')
-    parser.add_argument('--pretrained_path', type=str, default='0.8603.pth', help='name of the file to save the trained model')
+    parser.add_argument('--pretrained_path', type=str, default='0.8960.pth', help='name of the file to save the trained model')
     parser.add_argument('--pretrained', type=bool, default=True, help='transfer learning or not')
     parser.add_argument('--num_classes', type=int, default=7, help='number of classes')
+    parser.add_argument('--model_name', type=str, default="coatnet_1_rw_224", help='model_name')
     args = parser.parse_args()
     return args
 
@@ -34,7 +35,7 @@ def main():
 
     args = parse_args()
 
-    model = create_model(args.num_classes, args.pretrained)
+    model = create_model(args.num_classes, args.model_name, args.pretrained)
     model.to("cuda")
 
     trainloader, validloader, testloader = get_dataloader(args.base_root, args.csv_name)
diff --git a/CXR/main.py b/CXR/main.py
index 6bcb3ce..83b909c 100644
--- a/CXR/main.py
+++ b/CXR/main.py
@@ -22,11 +22,12 @@ def parse_args():
     parser.add_argument('--csv_name', type=str, default='chest_dongdong.csv', help='name of the CSV file containing the dataset')
     parser.add_argument('--epochs', type=int, default=50, help='number of training epochs')
     parser.add_argument('--save_name', type=str, default='model.pth', help='name of the file to save the trained model')
-    parser.add_argument('--lr', type=float, default=1e-4, help='learning rate for the optimizer')
-    parser.add_argument('--weight_decay', type=float, default=0, help='weight decay for the optimizer')
+    parser.add_argument('--lr', type=float, default=1e-5, help='learning rate for the optimizer')
+    parser.add_argument('--weight_decay', type=float, default=1e-4, help='weight decay for the optimizer')
     parser.add_argument('--pretrained', type=bool, default=True, help='transfer learning or not')
     parser.add_argument('--num_classes', type=int, default=7, help='number of classes')
-    parser.add_argument('--loss_func', type=str, default="BCE", help='loss function')
+    parser.add_argument('--loss_func', type=str, default="FocalLoss", help='loss function')
+    parser.add_argument('--model_name', type=str, default="coatnet_1_rw_224", help='model name')
     args = parser.parse_args()
     return args
 
@@ -39,11 +40,11 @@ def main():
     args = parse_args()
 
     d = vars(args)
-    name = args.loss_func
+    name = args.model_name + "-" + args.loss_func
 
     wandb_settings("c1058c55d898e9b5fa5f454bf6cd44b4493cabfe", d, "E-DA-CXR-Loss-Comparsion", "DDCVLAB", name)
 
-    model = create_model(args.num_classes, args.pretrained)
+    model = create_model(args.num_classes, args.model_name, args.pretrained)
     model.to("cuda")
 
     num_pos = torch.tensor([67,74,24,106,114,33,29]).cuda()
@@ -54,6 +55,7 @@ def main():
     scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(pre_optimizer, factor=0.1, patience=3)
 
     trainloader, validloader, testloader = get_dataloader(args.base_root, args.csv_name)
+    # scheduler = torch.optim.lr_scheduler.OneCycleLR(pre_optimizer, max_lr=1e-4, epochs=args.epochs, steps_per_epoch=len(trainloader))
 
     best_val_auc = 0
     for epoch in range(args.epochs): 
@@ -67,6 +69,7 @@ def main():
             pre_optimizer.zero_grad()
             loss.backward()
             pre_optimizer.step()
+            # scheduler.step()
 
             epoch_loss += loss.item()
                 
@@ -122,6 +125,8 @@ def main():
     print("*" * 10, " Validation ", "*" * 10)
     print("AUC: ",np.mean(auc_roc_score(valid_true, valid_pred)))
     print("ACC: ",accuracy_multi(torch.from_numpy(valid_true), torch.from_numpy(valid_pred>0.5)) )
+
+    wandb.log({"Best Val AUC": np.mean(auc_roc_score(valid_true, valid_pred))})
     # print("AP: ",ap(torch.from_numpy(valid_true), torch.from_numpy(valid_pred>0.5)) )
 
     with torch.no_grad():
@@ -143,6 +148,8 @@ def main():
     print("*" * 10, " Test ", "*" * 10)
     print("AUC: ",np.mean(auc_roc_score(test_true, test_pred)))
     print("ACC: ",accuracy_multi(torch.from_numpy(test_true), torch.from_numpy(test_pred>0.5)) )
+
+    wandb.log({"Test AUC": np.mean(auc_roc_score(test_true, test_pred))})
     # print("AP: ",ap(torch.from_numpy(test_true), torch.from_numpy(test_pred>0.5)) )
 
 if __name__ == "__main__":
diff --git a/CXR/model.py b/CXR/model.py
index 44522d6..c6928ba 100644
--- a/CXR/model.py
+++ b/CXR/model.py
@@ -3,17 +3,17 @@ import torch.nn as nn
 
 class CXRNet(nn.Module):
 
-    def __init__(self, num_classes, pretrained=True):
+    def __init__(self, num_classes=7, model_name="tv_densenet121", pretrained=True):
         super().__init__()
 
-        self.features = timm.create_model("tv_densenet121", num_classes=num_classes, pretrained=pretrained)
+        self.features = timm.create_model(model_name, num_classes=num_classes, pretrained=pretrained)
 
     def forward(self, x):
         return self.features(x)
 
 
-def create_model(num_classes, pretrained_path):
-    model = CXRNet(num_classes, pretrained_path)
+def create_model(num_classes, model_name, pretrained_path):
+    model = CXRNet(num_classes, model_name, pretrained_path)
     return model
 
 if __name__ == "__main__":
