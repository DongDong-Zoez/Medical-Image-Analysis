diff --git a/CXR/main.py b/CXR/main.py
index 6bcb3ce..25e9004 100644
--- a/CXR/main.py
+++ b/CXR/main.py
@@ -22,11 +22,12 @@ def parse_args():
     parser.add_argument('--csv_name', type=str, default='chest_dongdong.csv', help='name of the CSV file containing the dataset')
     parser.add_argument('--epochs', type=int, default=50, help='number of training epochs')
     parser.add_argument('--save_name', type=str, default='model.pth', help='name of the file to save the trained model')
-    parser.add_argument('--lr', type=float, default=1e-4, help='learning rate for the optimizer')
+    parser.add_argument('--lr', type=float, default=1e-3, help='learning rate for the optimizer')
     parser.add_argument('--weight_decay', type=float, default=0, help='weight decay for the optimizer')
     parser.add_argument('--pretrained', type=bool, default=True, help='transfer learning or not')
     parser.add_argument('--num_classes', type=int, default=7, help='number of classes')
     parser.add_argument('--loss_func', type=str, default="BCE", help='loss function')
+    parser.add_argument('--model_name', type=str, default="coatnet_0_rw_224", help='model name')
     args = parser.parse_args()
     return args
 
@@ -43,7 +44,7 @@ def main():
 
     wandb_settings("c1058c55d898e9b5fa5f454bf6cd44b4493cabfe", d, "E-DA-CXR-Loss-Comparsion", "DDCVLAB", name)
 
-    model = create_model(args.num_classes, args.pretrained)
+    model = create_model(args.num_classes, args.model_name, args.pretrained)
     model.to("cuda")
 
     num_pos = torch.tensor([67,74,24,106,114,33,29]).cuda()
diff --git a/CXR/model.py b/CXR/model.py
index 44522d6..d3e5798 100644
--- a/CXR/model.py
+++ b/CXR/model.py
@@ -3,10 +3,10 @@ import torch.nn as nn
 
 class CXRNet(nn.Module):
 
-    def __init__(self, num_classes, pretrained=True):
+    def __init__(self, num_classes=7, model_name="tv_densenet121", pretrained=True):
         super().__init__()
 
-        self.features = timm.create_model("tv_densenet121", num_classes=num_classes, pretrained=pretrained)
+        self.features = timm.create_model(model_name, num_classes=num_classes, pretrained=pretrained)
 
     def forward(self, x):
         return self.features(x)
